#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# Author: Debashis Paul																													 #
# Descriptions: This file contains all Shell configurations which are used by both 														 #
#               'bash' Shell (by default Mac Terminal) and 'zsh' Shell (iTerm)															 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#																					
# Change log																															 #
# <dd-mmm-yyyy: Reason>																													 #
# 15-Mar-2018: Created this file to use as common configuration for both 'bash' (used by default Mac Terminal)							 #
#              'zsh' (used by iTerm). The configurations are copied from original '.bashrc' file and modifed for the purpose.			 #
#																																		 #
# 18-Mar-2018: Added 5. Useful Functions section 																						 #
# 30-Mar-2018: Added PATH for anaconda    		 																						 #
#              																															 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# Sections:																																 #
# 1. Basic Common Customization																											 #
# 2. Environment Variables																												 #
# 3. PATH Override																														 #
# 4. Android adb Related Functions & Customization																						 #
# 5. Useful Functions 																													 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# 1. Basic Common Customization																											 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#Prevent overwriting files
set -o noclobber

#Shortcut for PWD
alias p="pwd"

#Use "lsl" for "ls -l"
alias lsl="ls -l"

# Preferred 'ls' implementation
alias ll='ls -FGlAhp'

#Use "lla" for "ll -a" (ll is an alias)
alias lla="ll -a"

#Use "cl" for "curl -L"
alias cl="curl -L"

#Use "now" for 'date + "%T"'
alias now='date + "%T"'

#Always do interactive remove
alias rm='rm -i'

#Shortcut for gradle command
alias gr='gradle'

#Shortcut for gradle quite mode
alias grq='gradle -q'

#Shortcut for gradle tasks
alias grt='gradle tasks'

#Shortcut for gradle tasks all
alias grta='gradle tasks --all'

#Shortcut for gradle task execution console display in old Gradle way
alias grc='gradle --console=plain'

#Show last few commands using shortcut
alias h='history | tail'

#Shortcut for read-write-execute (owner) - read-execute (group) - read-execute (all)
alias ch='chmod 755'

# Preferred 'cp' implementation
alias cp='cp -iv' 

# Preferred 'mv' implementation
alias mv='mv -iv' 

#Preferred 'CD' options
alias cd..='cd ../'                         # Go back 1 directory level (for fast typers)
alias ..='cd ../'                           # Go back 1 directory level
alias ...='cd ../../'                       # Go back 2 directory levels
alias .3='cd ../../../'                     # Go back 3 directory levels
alias .4='cd ../../../../'                  # Go back 4 directory levels
alias .5='cd ../../../../../'               # Go back 5 directory levels
alias .6='cd ../../../../../../'            # Go back 6 directory levels

#Shortcut to launch text editor Sublime
alias subl="/Applications/Sublime\ Text.app/Contents/SharedSupport/bin/subl"

#Shortcut to launch text editor Atom
alias atom="/Applications/Atom.app/Contents/MacOS/Atom --wait"

#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# 2. Environment Variables																												 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
JAVA_HOME=$(/usr/libexec/java_home)
CATALINA_HOME=/usr/local/apache-tomcat-7.0.64
ANDROID_HOME=/Users/debashispaul/Library/Android/sdk

#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# 3. PATH Override 																														 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#Override the path to use brew curl. As per homebrew suggestion.
export PATH=/usr/local/opt/curl/bin:$PATH
#Override the PATH for android-sdk platform tools (Commented the below as using ANDROID_HOME)
# export PATH=$PATH:/Users/debashispaul/Library/Android/sdk/platform-tools/
export PATH=$PATH:$ANDROID_HOME/platform-tools
#Override the PATH for other android-sdk tools (e.g. lint)
#export PATH=$PATH:/Users/debashispaul/Library/Android/sdk/tools/ (Commented the below as using ANDROID_HOME)
export PATH=$PATH:$ANDROID_HOME/tools
#Override the PATH to use regular git instead of Apple provided Xcode git. Not needed!
# export PATH=/usr/local/bin:$PATH
#Override the PATH for sonar-runner (this is to run sonar-scanner from anywhere)
export PATH=$PATH:/Users/debashispaul/sonar-scanner-3.0.3.778-macosx/bin
#Override the PATH to use anaconda
export PATH=$PATH:/usr/local/anaconda3/bin
#Override the PATH to Google gcould sdk
export PATH=$PATH:/Users/debashispaul/google-cloud-sdk/bin

#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# 4. Android adb Related Functions & Customization																						 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#Following functions work like aliases
#This is help function to display available customized adb commands
adbh() {
		echo "Welcome $USER"
		echo "Here are the commands for adb you have customized:"
		echo
		echo "'adbi arg' -> To install an application. Command must run from inside the main application folder. The 'arg' is the package name."
		echo
		echo "'adbs arg1 [arg2]' -> To start an application. The 'arg1' is the package name. The 'arg2' is main activity name, if not provided then 'MainActivity' is used."
		echo
		echo "'adbr arg1 [arg2]' -> To restart an application. The 'arg1' is the package name. The 'arg2' is main activity name, if not provided then 'MainActivity' is used."
		echo
		echo "'adbu arg' -> To uninstall an application. The 'arg' is the package name."
}

#This function checks if a package name is valid - ideally the package name should have two '.'s
check_package_name()  
{
	if [[ $1 == *.*.* ]]; then
		return 0
	else
		echo "Looks like invalid pacakge name! Please check."
		return 1
	fi
}

#Preferred way to install an app using adb (must be run from inside the app main directory)
adbi() 
{
	if [ $# -eq 0 ]; then
		echo "Please provide the name of the package you want to install. Run 'adbh' for more help."
	else
		check_package_name $1
		ret=$?
		if [[ $ret -eq 1 ]]; then
			return $?
		else
			# The debug apk can be isnide of /debug folder or just inside apk - so handling that here
			if [ -d $PWD/app/build/outputs/apk/debug ]; then
				adb push $PWD/app/build/outputs/apk/debug/app-debug.apk /data/local/tmp/"$1"
		 	else
		 		adb push $PWD/app/build/outputs/apk/app-debug.apk /data/local/tmp/"$1"
		 	fi
		 	adb shell pm install -t -r /data/local/tmp/"$1"
		fi
	fi
}

#Preferred way to start an app using adb
adbs() 
{
	if [ $# -eq 0 ]; then
		echo "Package name must be provided. Run 'adbh' for more help."
	elif [ $# -eq 1 ]; then
		check_package_name $1
		ret=$?
		if [[ $ret -eq 1 ]]; then
			return $?
		else
			echo "Package name is $1. Going to start the activity 'MainActivity' of package $1. If your activity name is different then provide that as second argument. Run 'adbh' for more help."
			adb shell am start -n "$1"/"$1".MainActivity -a android.intent.action.MAIN -c android.intent.category.LAUNCHER
		fi
	else
		check_package_name $1
		ret=$?
		if [[ $ret -eq 1 ]]; then
			return $?
		else
			adb shell am start -n "$1"/"$1"."$2" -a android.intent.action.MAIN -c android.intent.category.LAUNCHER
		fi
	fi
}

#Preferred way to re-start an app using adb
adbr() 
{
	if [ $# -eq 0 ]; then
		echo "Package name must be provided. Run 'adbh' for more help."
	elif [ $# -eq 1 ]; then
		check_package_name $1
		ret=$?
		if [[ $ret -eq 1 ]]; then
			return $?
		else
			echo "Package name is $1. Going to start the activity 'MainActivity' of package $1. If your activity name is different then provide that as second argument. Run 'adbh' for more help."
			adb shell am force-stop "$1"
			adb shell am start -n "$1"/"$1".MainActivity -a android.intent.action.MAIN -c android.intent.category.LAUNCHER
		fi
	else
		check_package_name $1
		ret=$?
		if [[ $ret -eq 1 ]]; then
			return $?
		else
			adb shell am force-stop "$1"
			adb shell am start -n "$1"/"$1"."$2" -a android.intent.action.MAIN -c android.intent.category.LAUNCHER
		fi
	fi
}

#Preferred way to uninstall an app using adb
adbu() 
{
	if [ $# -eq 0 ]; then
		echo "Please provide the name of the package you want to uninstall. Run 'adbh' for more help."
	else
		check_package_name $1
		ret=$?
		if [[ $ret -eq 1 ]]; then
			return $?
		else
			adb shell pm uninstall -k "$1"
		fi
	fi
}
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
# 5. Useful Functions																						 							 #
#- - - - - - -  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
#Function can take arguments
# Create a new directory and then do cd to go isnide that directory
# Credit https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789
function mkd() {
  mkdir -p "$@" && cd "$@"
}

# Open man page as PDF
# Credit https://medium.com/@webprolific/getting-started-with-dotfiles-43c3602fd789
function manpdf() {
 man -t "${1}" | open -f -a /Applications/Preview.app/
}

# Determine size of a file or total size of a directory
# Credit https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Compare original and gzipped file size
# Credit https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# `o` with no arguments opens the current directory, otherwise opens the given location
# Credit https://github.com/mathiasbynens/dotfiles/blob/master/.functions
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}
#- - - - - - -  - - - - - - - - - - - - - - - - - -   End of File   - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -- - - - #
